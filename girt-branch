#!/bin/dash

if [ ! -d ".girt" ] # girt-init hasn't been run
then
  echo "girt-branch: error: girt repository directory .girt not found" 1>&2
  exit 1
fi

# get the name of the current branch
HEAD=$(grep "HEAD: " ".girt/info" | cut -d' ' -f2)
# get the next commit number.
ncommits=$(grep "ncommits: " ".girt/info" | cut -d' ' -f2)

if [ "$ncommits" = 0 ]
then
  echo "girt-branch: error: this command can not be run until after the first commit" 1>&2
  exit 1

elif [ "$1" != "-d" -a $# -eq 2 ] || [ $# -gt 2 ] || [ "$1" = "-d" -a $# -eq 1 ]
then
  echo "usage: girt-branch [-d] <branch>" 1>&2
  exit 1
fi

girt_repo='.girt'
# print a list of branches
if [ "$#" = 0 ]
then
  for branch in $(ls -p .girt | grep / | sed 's/\/$//' | sort)
  do
    echo "$branch"
  done
# delete a branch
elif [ "$1" = "-d" ]
then

  if [ "$2" = "master" ]
  then
    echo "girt-branch: error: can not delete branch 'master'" 1>&2
    exit 1
  elif [ ! -d "${girt_repo}/$2" ]
  then
    echo "girt-branch: error: branch '$2' doesn't exist" 1>&2
    exit 1
  fi

  HEAD_commits=$(ls -p ".girt/${HEAD}/commits" | grep -v / | sed 's/-msg//' | sort -rn)
  branch_commits=$(ls -p ".girt/${2}/commits" | grep -v / | sed 's/-msg//' | sort -rn)
  if [ "$HEAD_commits" != "$branch_commits" ]
  then
    echo "girt-branch: error: branch '$2' has unmerged changes" 1>&2
    exit 1
  fi
  rm -rf "${girt_repo}/${2}"
  echo "Deleted branch '${2}'"
# create a branch
else
  # get the name of the current branch
  HEAD=$(grep "HEAD: " ".girt/info" | cut -d' ' -f2)

  if [ -d "${girt_repo}/$1" ]
  then
    echo "girt-branch: error: branch '$1' already exists" 1>&2
    exit 1
  fi
  mkdir -p "${girt_repo}/${1}/index"
  cp -r "${girt_repo}/${HEAD}/index" "${girt_repo}/${1}/"

  cp -r "${girt_repo}/${HEAD}/commits" "${girt_repo}/${1}/commits"
fi